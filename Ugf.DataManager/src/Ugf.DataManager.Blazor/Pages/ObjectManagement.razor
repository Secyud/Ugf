@page "/object"

@using Ugf.DataManager.ClassManagement
@inherits AbpCrudPageBase<Ugf.DataManager.ClassManagement.ISpecificObjectAppService, Ugf.DataManager.ClassManagement.SpecificObjectDto, Guid, Ugf.DataManager.ClassManagement.GetObjectListInput>
@inject AbpBlazorMessageLocalizerHelper<InfinityWorldChessDataResource> Lh
<Card>
    <CardHeader>
        @* ************************* PAGE HEADER ************************* *@
        <PageHeader Title="@L["Objects"]"
                    BreadcrumbItems="@BreadcrumbItems"
                    Toolbar="@Toolbar">
        </PageHeader>
    </CardHeader>
    <CardBody>
        <Fields>
            <Field  ColumnSize="ColumnSize.Is6.OnDesktop">
                <TextEdit @bind-Text="@GetListInput.Name" Placeholder="@L["Name"]"/>
            </Field>
            <Field  ColumnSize="ColumnSize.Is6.OnDesktop">
                <TextEdit @bind-Text="@GetListInput.BundleName" Placeholder="@L["BundleName"]"/>
            </Field>
            <Field  ColumnSize="ColumnSize.Is12.OnDesktop">
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <Button Clicked="() => OpenClassSelect(0)" Color="Color.Secondary"
                                Size="Size.Small">
                            @L["SelectClass"]
                        </Button>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit Text="@SearchClassName"
                                  TextColor="TextColor.Info" Readonly/>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Clicked="GetEntitiesAsync" Color="Color.Secondary">@L["Search"]</Button>
                    </Addon>
                </Addons>
            </Field>
        </Fields>
        @* ************************* DATA GRID ************************* *@
        <AbpExtensibleDataGrid TItem="SpecificObjectDto"
                               Data="@Entities"
                               ReadData="@OnDataGridReadAsync"
                               TotalItems="@TotalCount"
                               ShowPager="true"
                               PageSize="@PageSize"
                               CurrentPage="@CurrentPage"
                               Columns="@ObjectManagementTableColumns">
        </AbpExtensibleDataGrid>
    </CardBody>
</Card>

<Modal @ref="CreateModal" Closing="@ClosingCreateModal">
    <ModalContent Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewObject"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@Lh.Localize">
                        <Field>
                            <FieldLabel>@L["DisplayName:Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name" Autofocus="true">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <SelectList TItem="string"
                                TValue="string"
                                Data="@Bundles.BundleNames"
                                TextField="@(item => item)"
                                ValueField="@(item => item)"
                                @bind-SelectedValue="@NewEntity.BundleName"/>
                    <Field>
                        <FieldLabel>
                            @L["DisplayName:Class"]
                        </FieldLabel>
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Text="@NewEntity.ClassContainer?.Name"
                                          TextColor="TextColor.Info" Readonly/>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Button Clicked="() => OpenClassSelect(1)"
                                        Size="Size.Small" Color="Color.Secondary">
                                    @L["SelectClass"]
                                </Button>
                            </Addon>
                        </Addons>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <SubmitButton Clicked="@CreateEntityAsync"/>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="EditModal" Closing="@ClosingEditModal">
    <ModalContent Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["Edit"]</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@Lh.Localize">
                        <Field>
                            <FieldLabel>@L["DisplayName:Name"] *</FieldLabel>
                            <TextEdit @bind-Text="EditingEntity.Name" Autofocus="true">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["DisplayName:Bundle"]</FieldLabel>
                        <SelectList TItem="string"
                                    TValue="string"
                                    Data="@Bundles.BundleNames"
                                    TextField="@(item => item)"
                                    ValueField="@(item => item)"
                                    @bind-SelectedValue="@EditingEntity.BundleName"/>
                    </Field>
                    <Field>
                        <FieldLabel>
                            @L["DisplayName:Class"]
                        </FieldLabel>
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Text="@EditingEntity.ClassContainer?.Name"
                                          TextColor="TextColor.Info" Readonly/>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Button Clicked="() => OpenClassSelect(2)"
                                        Size="Size.Small" Color="Color.Secondary">
                                    @L["SelectClass"]
                                </Button>
                            </Addon>
                        </Addons>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <SubmitButton Clicked="@UpdateEntityAsync"/>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="ObjectDataModal" Closing="@CloseObjectDataModal">
    <ModalContent Size="ModalSize.Fullscreen" Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["SetData"]</ModalTitle>
                <CloseButton Clicked="CloseObjectDataModalAsync"/>
            </ModalHeader>
            <ModalBody>
                @DataDto.ClassContainer?.Description
                @if (DataDto?.Properties is not null)
                {
                    <Validations @ref="DataValidations" Model="@DataDto" ValidateOnLoad="false">
                        <Fields>
                            @foreach (ObjectPropertyDto data in DataDto.Properties)
                            {
                                <Validation Validator="e => ValidateValue(e, data)" MessageLocalizer="@Lh.Localize">
                                    <Field ColumnSize="ColumnSize.Is3.OnDesktop">
                                        <FieldLabel>
                                            <Tooltip Text="@($"{data.ClassProperty.ClassName}: {data.ClassProperty.Description}")"
                                                     TriggerTargetId="tooltip-custom-target" Inline>
                                                <Badge Color="Color.Info">@data.ClassProperty.Name</Badge>
                                            </Tooltip>
                                            (@data.ClassProperty.Type)
                                        </FieldLabel>
                                        <TextEdit @bind-Text="@data.Value">
                                            <Feedback>
                                                <ValidationError/>
                                            </Feedback>
                                        </TextEdit>
                                    </Field>
                                </Validation>
                            }
                        </Fields>
                    </Validations>
                }
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseObjectDataModalAsync">@L["Cancel"]</Button>
                <SubmitButton Clicked="@UpdateObjectDataAsync"/>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<ClassSelectComponent @ref="ClassSelect" OnSelect="SetClass"></ClassSelectComponent>