@using Ugf.DataManager.ClassManagement
@using Secyud.Ugf.DataManager
@inherits DataManagerComponentBase

@foreach (Tuple<ClassPropertyDto, SAttribute> p in _objectDataView.Properties)
{
    <Field>
        <FieldLabel>
            <Tooltip Text="@p.Item1?.Description"
                     TriggerTargetId="tooltip-custom-target" Inline>
                <Badge Color="Color.Info">@p.Item2.Info.Name</Badge>
            </Tooltip>
        </FieldLabel>
    </Field>

    switch (p.Item2.Type)
    {
        case FieldType.Object:
            object obj = _objectDataView.GetValue<object>(p);
            if (obj is not null)
            {
                <Button Clicked="() => SetNull(p)">SetNull</Button>
                <ObjectDataComponent Object="obj"/>
            }
            else
            {
                <Autocomplete TItem="Tuple<string,  Guid>" TValue="Guid" 
                              Data="TypeIdMapper.SubTypes(p.Item2.Info.FieldType)"
                              TextField="u => u.Item1" ValueField="u => u.Item2"
                              SelectedValueChanged="v => CreateAsync(v, p)"
                              Placeholder="@L["Select"]"/>
            }
            break;
        case FieldType.Bool:
            <Check TValue="bool" Checked="_objectDataView.GetValue<bool>(p)"
                   CheckedChanged="b => _objectDataView.SetValue(p, b)"/>
            break;
        case FieldType.UInt8:
            <NumericEdit TValue="byte" Value="_objectDataView.GetValue<byte>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.UInt16:
            <NumericEdit TValue="ushort" Value="_objectDataView.GetValue<ushort>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.UInt32:
            <NumericEdit TValue="uint" Value="_objectDataView.GetValue<uint>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.UInt64:
            <NumericEdit TValue="ulong" Value="_objectDataView.GetValue<ulong>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Int8:
            <NumericEdit TValue="sbyte" Value="_objectDataView.GetValue<sbyte>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Int16:
            <NumericEdit TValue="short" Value="_objectDataView.GetValue<short>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Int32:
            <NumericEdit TValue="int" Value="_objectDataView.GetValue<int>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Int64:
            <NumericEdit TValue="long" Value="_objectDataView.GetValue<long>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Single:
            <NumericEdit TValue="float" Value="_objectDataView.GetValue<float>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Double:
            <NumericEdit TValue="double" Value="_objectDataView.GetValue<double>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Decimal:
            <NumericEdit TValue="decimal" Value="_objectDataView.GetValue<decimal>(p)"
                         ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.String:
            <TextEdit Text="ObjectDataView.GetValue<string>(p)"
                      TextChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        case FieldType.Guid:
            <GuidEdit Value="_objectDataView.GetValue<Guid>(p)"
                      ValueChanged="v => _objectDataView.SetValue(p, v)"/>
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
}
@* *@
@* @if (DataDto?.Properties is not null) *@
@* { *@
@*     <Validations @ref="DataValidations" Model="@DataDto" ValidateOnLoad="false"> *@
@*         <Fields> *@
@*             @foreach (ObjectPropertyDto data in DataDto.Properties) *@
@*             { *@
@*                 <Validation Validator="e => ValidateValue(e, data)" MessageLocalizer="@Lh.Localize"> *@
@*                     <Field ColumnSize="ColumnSize.Is3.OnDesktop"> *@
@*                         <FieldLabel> *@
@*                             <Tooltip Text="@($"{data.ClassProperty.ClassName}: {data.ClassProperty.Description}")" *@
@*                                      TriggerTargetId="tooltip-custom-target" Inline> *@
@*                                 <Badge Color="Color.Info">@data.ClassProperty.Name</Badge> *@
@*                             </Tooltip> *@
@*                             (@data.ClassProperty.Type) *@
@*                         </FieldLabel> *@
@*                         <TextEdit @bind-Text="@data.Value"> *@
@*                             <Feedback> *@
@*                                 <ValidationError/> *@
@*                             </Feedback> *@
@*                         </TextEdit> *@
@*                     </Field> *@
@*                 </Validation> *@
@*             } *@
@*         </Fields> *@
@*     </Validations> *@
@* } *@